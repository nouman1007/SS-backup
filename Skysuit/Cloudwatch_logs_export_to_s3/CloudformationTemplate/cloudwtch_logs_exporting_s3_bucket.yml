#===============================================================================
# Create S3 Bucket, Put bucket policy, Export CloudWatch Logs in this Bucket
# through lambda function and CloudWatch rule to trigger lambda everyday.
#
# (c) Enquizit, Inc 2019
# v1.0 2020-07-15
#================================================================================
AWSTemplateFormatVersion: '2010-09-09'
Description: S3 Bucket Creation, Put Bucket Policy, Export cloudwatch logs to that Bucket, cloudwatch Rule. 
###################################################
#
# CloudFormation Interface Metadata
#
###################################################
Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Cloudwatch Logs & Destination Bucket Information
      Parameters:
      - pCloudwatchLogsBucketName
      - pTargetId
    ParameterLabels:
      pCloudwatchLogsBucketName:
        default: Destination Bucket Name
      pTargetId:
        default: Name for the target ID to cloudwatch rule.
      
###################################################
#
# Template Parameter Definitions
#
###################################################
Parameters: 
    
  pCloudwatchLogsBucketName:
    Type: String
    Default: cloudwatchlogsbucket
    Description: Enter Name of Cloudwatch Logs Bucket(Lower Case).
    
  pTargetId:
    Type: String
    Default: "cw-lg-expt-Func"
    Description: A name for the target. Use a string that will help you identify the target. Each target associated with a rule must have an Id unique for that rule.
    

###################################################
#
# Template Resource Definitions
#
###################################################
  
Resources:

 #Create s3 bucket for cloudwatch logs backup
  rCloudwatchLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${pCloudwatchLogsBucketName}-${AWS::AccountId}-${AWS::Region}' 
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Retain

 #Put bucket policy for to give s3 permissions
  rBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: rCloudwatchLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ExportCloudwatchLogs
          Effect: Allow
          Principal:
            Service: logs.amazonaws.com
          Action: s3:GetBucketAcl
          Resource: !Sub 'arn:aws:s3:::${pCloudwatchLogsBucketName}-${AWS::AccountId}-${AWS::Region}'
        - Sid: ExportingCloudwatchLogs
          Effect: Allow
          Principal:
            Service: logs.amazonaws.com
          Action: s3:PutObject
          Resource:
          - !Sub 'arn:aws:s3:::${pCloudwatchLogsBucketName}-${AWS::AccountId}-${AWS::Region}/*'
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
              
  # Custom lambda that Export the cloudwatch Logs into the S3 Bucket
  rAWSCloudWatchLogExportFunction:
    Type: AWS::Lambda::Function
    DependsOn: rBucketPolicy
    Properties:
      Handler: index.handler
      Role: !GetAtt rLambdaExRole.Arn
      Code: '../Lambda/cloudwtch_logs_exporting_s3_bucket'
      Runtime: python3.7
      Timeout: 240
      Environment:
        Variables:
          Dest_Bucket_Name: !Sub '${pCloudwatchLogsBucketName}-${AWS::AccountId}-${AWS::Region}'
      
 # Lambda execution Role
  rLambdaExRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AWSCloudwatchLogsExporterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:  
              - Effect: Allow
                Action:
                  - 'logs:*'
                  - 's3:*'
                Resource: '*'
            
 
  # cloudwatch Rule to trigger the lambda function    
  rScheduledRuleForLambdaFunc: 
    Type: AWS::Events::Rule
    DependsOn: rAWSCloudWatchLogExportFunction
    Properties: 
      Description: "Scheduled Rule for export cloudwatch logs to s3 Bucket"
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt rAWSCloudWatchLogExportFunction.Arn
          Id: 
            Ref: pTargetId
            
  # Permission for events to invoke lambda function       
  rPermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    DependsOn: rAWSCloudWatchLogExportFunction
    Properties: 
      FunctionName: !Ref rAWSCloudWatchLogExportFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rScheduledRuleForLambdaFunc.Arn
